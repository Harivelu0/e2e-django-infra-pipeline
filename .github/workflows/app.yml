name: Deploy App

on:
  workflow_run:
    workflows: ["Terraform Infra Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # 3Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # 4Ô∏è‚É£ Initialize Terraform
      - name: Terraform Init (remote backend)
        working-directory: terraform
        run: terraform init -input=false

      # 5Ô∏è‚É£ Extract secret name dynamically using pattern matching
      - name: Extract Secret Name
        working-directory: terraform
        run: |
          echo "Fetching app_secret_name from Terraform output..."
          # Create a file with the output
          terraform output -raw app_secret_name > terraform_output.txt
          
          # Extract the secret name by finding the pattern django-blog-secrets-*
          EXTRACTED_SECRET=$(grep -o 'django-blog-secrets-[a-zA-Z0-9]*' terraform_output.txt || echo "")
          
          if [ -z "$EXTRACTED_SECRET" ]; then
            # Alternative approach: just take the first line
            EXTRACTED_SECRET=$(head -n 1 terraform_output.txt)
            
            # Validate that the extracted secret matches the expected pattern
            if [[ ! "$EXTRACTED_SECRET" =~ ^django-blog-secrets-[a-zA-Z0-9]+$ ]]; then
              echo "Warning: Extracted secret does not match expected pattern: $EXTRACTED_SECRET"
              echo "Trying to clean the output..."
              
              # Further cleanup
              EXTRACTED_SECRET=$(cat terraform_output.txt | tr -d '\r\n' | grep -o 'django-blog-secrets-[a-zA-Z0-9]*' || echo "")
              
              if [ -z "$EXTRACTED_SECRET" ]; then
                echo "Error: Failed to extract valid secret name"
                echo "Content of terraform_output.txt:"
                cat terraform_output.txt
                exit 1
              fi
            fi
          fi
          
          echo "Extracted secret name: $EXTRACTED_SECRET"
          echo "SECRET_NAME=$EXTRACTED_SECRET" >> $GITHUB_ENV
          
          # Debug output
          echo "Secret name has been set to: $EXTRACTED_SECRET"

      # 6Ô∏è‚É£ Fetch app secrets from AWS Secrets Manager
      - name: Fetch App Secrets
        run: |
          echo "Retrieving secrets using name: $SECRET_NAME"
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --query SecretString \
            --output text)
          
          echo "Secret retrieved successfully. Parsing values..."
          echo "$SECRET_JSON" > secret.json

          for key in DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT DJANGO_SECRET_KEY; do
            value=$(jq -r ".${key}" secret.json)
            echo "$key has been set"
            echo "$key=$value" >> $GITHUB_ENV
          done
          
          # Remove secret file after use
          rm secret.json
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         
      # 7Ô∏è‚É£ Install Python dependencies
      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 8Ô∏è‚É£ Run Django migrations & create admin user
      - name: Run DB migrations and create admin
        run: |
          source venv/bin/activate
          export DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
          export DB_NAME=$DB_NAME
          export DB_USER=$DB_USER
          export DB_PASSWORD=$DB_PASSWORD
          export DB_HOST=$DB_HOST
          export DB_PORT=$DB_PORT

          echo "Running Django migrations..."
          python manage.py migrate

          echo "Creating admin user if not exists..."
          python manage.py createsuperuser \
            --noinput --username admin --email admin@example.com || echo "Admin already exists"

      # 9Ô∏è‚É£ Build & push Docker image
      - name: Build and Push Docker Image
        run: |
          echo "Authenticating with ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          
          echo "Building and pushing Docker image..."
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myapp:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      # üîü Deploy to ECS
      - name: Deploy to ECS
        run: |
          echo "Deploying to ECS..."
          aws ecs update-service \
            --cluster django-ecs-cluster \
            --service django-service \
            --force-new-deployment
          
          echo "Deployment complete!"