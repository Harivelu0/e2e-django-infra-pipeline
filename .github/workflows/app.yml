name: Deploy App

on:
  workflow_run:
    workflows: ["Terraform Infra Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # 3Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # 4Ô∏è‚É£ Initialize Terraform
      - name: Terraform Init (remote backend)
        working-directory: terraform
        run: terraform init -input=false

      # 5Ô∏è‚É£ Fetch secret name from Parameter Store directly
      - name: Fetch Secret Name from Parameter Store
        run: |
          echo "Fetching app_secret_name from Parameter Store..."
          SECRET_NAME=$(aws ssm get-parameter \
            --name "/django-blog/app_secret_name" \
            --query "Parameter.Value" \
            --output text)
          
          # Validate that we got a value
          if [ -z "$SECRET_NAME" ]; then
            echo "Error: Failed to retrieve secret name from Parameter Store"
            exit 1
          fi
          
          echo "Retrieved secret name: $SECRET_NAME"
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # 6Ô∏è‚É£ Fetch app secrets from AWS Secrets Manager
      - name: Fetch App Secrets
        run: |
          echo "Retrieving secrets using name: $SECRET_NAME"
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --query SecretString \
            --output text)
          
          echo "Secret retrieved successfully. Parsing values..."
          echo "$SECRET_JSON" > secret.json
          for key in DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT DJANGO_SECRET_KEY; do
            value=$(jq -r ".${key}" secret.json)
            echo "$key has been set"
            echo "$key=$value" >> $GITHUB_ENV
          done
          
          # Remove secret file after use
          rm secret.json
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         
      # 7Ô∏è‚É£ Install Python dependencies
      - name: Setup Python environment
        working-directory: django5-blog-tutorial
        run: |
          python3 -m venv /home/runner/venv
          source /home/runner/venv/bin/activate
          
          # Install MySQL client system dependencies
          sudo apt-get update
          sudo apt-get install -y python3-dev default-libmysqlclient-dev build-essential
          
          pip install --upgrade pip
          pip install -r requirements.txt

      # ADD THESE NEW STEPS HERE
      
      # 7.5Ô∏è‚É£ Fix DB_HOST and DB_PORT
      - name: Fix DB connection parameters
        run: |
          echo "Original DB_HOST: $DB_HOST"
          
          # Extract hostname without port
          if [[ "$DB_HOST" == *":"* ]]; then
            HOSTNAME=$(echo "$DB_HOST" | cut -d':' -f1)
            PORT=$(echo "$DB_HOST" | cut -d':' -f2)
            
            echo "Extracted hostname: $HOSTNAME"
            echo "Extracted port: $PORT"
            
            # Set corrected environment variables
            echo "DB_HOST=$HOSTNAME" >> $GITHUB_ENV
            echo "DB_PORT=$PORT" >> $GITHUB_ENV
            
            echo "Updated DB_HOST and DB_PORT in environment"
          fi
          
          # Print for verification
          echo "Will use DB_HOST: $HOSTNAME"
          echo "Will use DB_PORT: $DB_PORT"
      
      # 9Ô∏è‚É£ Build & push Docker image
      - name: Build and Push Docker Image
        run: |
          echo "Authenticating with ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          
          echo "Building and pushing Docker image..."
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myapp:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
      
      # üîü Deploy to ECS
      - name: Deploy to ECS
        run: |
          echo "Deploying to ECS..."
          aws ecs update-service \
            --cluster django-ecs-cluster \
            --service django-service \
            --force-new-deployment
          
          echo "Deployment complete!"