name: App CI/CD Pipeline

on:
  workflow_run:
    workflows: ["infra-creation"]
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPO: my-django-app
      ECS_CLUSTER: django-ecs-cluster
      ECS_SERVICE: django-service
      CONTAINER_NAME: django-container

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_TAG=latest
          ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
          echo "Building image: $ECR_URI:$IMAGE_TAG"

          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          echo "Updating ECS Service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
    post:
      - name: Force Unlock Terraform State
        if: always()
        run: |
          LOCK_ID=$(aws dynamodb scan \
            --table-name terraform-locks \
            --query "Items[0].LockID.S" \
            --output text)

          if [ "$LOCK_ID" != "None" ]; then
            terraform force-unlock -force $LOCK_ID || true
          fi
