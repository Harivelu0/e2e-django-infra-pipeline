name: Deploy App

on:
  workflow_run:
    workflows: ["Terraform Infra Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3️⃣ Fetch Terraform outputs (dynamic secret name)
      - name: Fetch Terraform output
        working-directory: terraform
        run: |
          echo "Fetching app_secret_name from remote backend..."
          SECRET_NAME=$(terraform output -raw app_secret_name)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV

      # 4️⃣ Fetch App Secrets from AWS Secrets Manager
      - name: Fetch App Secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --query SecretString \
            --output text)
          
          echo "$SECRET_JSON" > secret.json
          
          for key in DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT DJANGO_SECRET_KEY; do
            value=$(jq -r ".${key}" secret.json)
            echo "$key=$value" >> $GITHUB_ENV
          done

      # 5️⃣ Install Python dependencies
      - name: Setup Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 6️⃣ Run Django migrations & create admin user
      - name: Run DB migrations and create admin
        run: |
          source venv/bin/activate
          export DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
          export DB_NAME=$DB_NAME
          export DB_USER=$DB_USER
          export DB_PASSWORD=$DB_PASSWORD
          export DB_HOST=$DB_HOST
          export DB_PORT=$DB_PORT

          # Run migrations
          python manage.py migrate

          # Create admin user if not exists
          python manage.py createsuperuser \
            --noinput --username admin --email admin@example.com || echo "Admin already exists"

      # 7️⃣ Build & push Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myapp:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      # 8️⃣ Deploy to ECS
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster django-ecs-cluster \
            --service django-service \
            --force-new-deployment
